#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>
#include <iostream>

#include "ch3d.h"
#include "q3map2.h"

#ifdef __MODEL_CONVEX_HULL__

using namespace std;

bool SaveOBJ(std::string fileName, float *verts, unsigned int numPoints, unsigned int *tris, unsigned int numTris)
{
    std::cout << "Saving " <<  fileName.c_str() << std::endl;

	char fileNameOut[128] = { 0 };
	char tempfileNameOut[128] = { 0 };

	strcpy(tempfileNameOut, fileName.c_str());
	StripFilename(tempfileNameOut);
	StripFilename(tempfileNameOut);
	StripFilename(tempfileNameOut);
	if (strlen(tempfileNameOut) > 0)
	{
		//Sys_Printf("Create %s.\n", tempfileNameOut);
		Q_mkdir(va("%s%s", g_strDirs[0], tempfileNameOut));
	}

	strcpy(tempfileNameOut, fileName.c_str());
	StripFilename(tempfileNameOut);
	StripFilename(tempfileNameOut);
	if (strlen(tempfileNameOut) > 0)
	{
		//Sys_Printf("Create %s.\n", tempfileNameOut);
		Q_mkdir(va("%s%s", g_strDirs[0], tempfileNameOut));
	}

	strcpy(tempfileNameOut, fileName.c_str());
	StripFilename(tempfileNameOut);
	if (strlen(tempfileNameOut) > 0)
	{
		//Sys_Printf("Create %s.\n", tempfileNameOut);
		Q_mkdir(va("%s%s", g_strDirs[0], tempfileNameOut));
	}

#define PATH_MAX 260
	extern char     g_strDirs[VFS_MAXDIRS][PATH_MAX];

    std::ofstream fout(va("%s%s", g_strDirs[0], fileName.c_str()));

    if (fout.is_open()) 
    {
		fout << "#############################################################\n";
		fout << "#  Convex hull collision model - Generated by WzMap...\n\n";
		fout << "#############################################################\n";

		fout << "#\n";
		fout << "# Verts...\n";
		fout << "#\n\n";

        for(size_t v = 0; v < numPoints; v+=3)
        {
            fout << "v " << verts[v+0] << " "
                         << verts[v+1] << " "
                         << verts[v+2] << std::endl;
        }

		fout << "\n";

		fout << "#\n";
		fout << "# Tris...\n";
		fout << "#\n\n";

		fout << "g collision\n";

        for(size_t f = 0; f < numTris; f+=3)
        {
			// UQ1: Seems obj starts indexes at 1, not 0... *shrug*
            fout << "f " << tris[f+0]+1 << " "
                        << tris[f+1]+1 << " "
                        << tris[f+2]+1 << std::endl;
        }

		fout << "\n";

        fout.close();
        return true;
    }
    return false;
}

extern void LoadShaderImages( shaderInfo_t *si );
extern qboolean StringContainsWord(const char *haystack, const char *needle);

void ConvexHull ( picoModel_t *model, char *fileNameOut )
{
	if( model == NULL )
		return;

	unsigned int		numVerts = 0;
	float				*verts = (float*)malloc(3 * 4194304 * sizeof(float));
	unsigned int		numTris = 0;
	unsigned int		*tris = (unsigned int*)malloc(3 * 4194304 * sizeof(unsigned int));

	/* each surface on the model will become a new map drawsurface */
	int		numSurfaces = PicoGetModelNumSurfaces(model);

	for( int s = 0; s < numSurfaces; s++ )
	{
		int				skin = 0;

		/* get surface */
		picoSurface_t	*surface = PicoGetModelSurface( model, s );

		if( surface == NULL )
			continue;

		/* only handle triangle surfaces initially (fixme: support patches) */
		if (PicoGetSurfaceType(surface) != PICO_TRIANGLES)
		{
			Sys_Warning("surface %i (%s) is not a triangles surface.", s, surface->name);
			continue;
		}
		
		char			*picoShaderName = PicoGetSurfaceShaderNameForSkin( surface, skin );

		shaderInfo_t	*si = ShaderInfoForShader( picoShaderName );

		LoadShaderImages( si );

		/*if (!si->clipModel)
		{
			Sys_Warning("surface %i (%s) is not a clip surface.", s, surface->name);
			continue;
		}*/

		if ((si->compileFlags & C_TRANSLUCENT) || (si->compileFlags & C_SKIP) || (si->compileFlags & C_FOG) || (si->compileFlags & C_NODRAW) || (si->compileFlags & C_HINT))
		{
			//Sys_Warning("surface %i (%s) is not a visible surface.", s, surface->name);
			continue;
		}
		
		if( !(si->compileFlags & C_SOLID) )
		{
			//Sys_Warning("surface %i (%s) is not a solid surface.", s, surface->name);
			continue;
		}
		else if (StringContainsWord(picoShaderName, "leaves")
			|| StringContainsWord(picoShaderName, "leaf")
			|| StringContainsWord(picoShaderName, "TreePineForestBranch"))
		{// UQ1: FIXME - Hacky override. Why does it think some leaves are solid? I'm assuming I need to fix some WZ shaders...
			//Sys_Warning("surface %i (%s) is not a solid surface (tree leaves).", s, surface->name);
			continue;
		}
		else
		{
			//Sys_Warning("surface %i (%s) *IS* a solid surface.", s, surface->name);
		}
		
		//
		// UQ1: Something seems to be really wrong with this... I don't get it...
		//

		/* get info */
		picoIndex_t *idx = PicoGetSurfaceIndexes(surface, 0);

		/* walk the triangle list */
		for (int j = 0; j < PicoGetSurfaceNumIndexes(surface); j += 3, idx += 3)
		{
			for (int k = 0; k < 3; k++)
			{
				//tris[numTris++] = idx[k];
				tris[numTris++] = numVerts/3;

				picoVec_t *xyz = PicoGetSurfaceXYZ(surface, idx[k]);
				verts[numVerts++] = xyz[0]; // stupid points array crap...
				verts[numVerts++] = xyz[1];
				verts[numVerts++] = xyz[2];
			}
		}
	}

	numVerts /= 3;
//	numTris /= 3;

	if (numVerts > 0 && numTris > 0)
	{
		unsigned int origTris = numTris;

		Sys_Printf("ORIGINAL: model %s. verts %u. tris %u.\n", model->fileName, numVerts, numTris);

		unsigned int triSize = 3;
		unsigned int triNum = numTris / triSize;

		//PrintList(verts, numVerts, tris, numTris, triSize);
		ConvexHull3D(&verts, &numVerts, &tris, &triNum, &triSize, FACETS);

		numTris = triNum * triSize;

		if (verts && tris && numVerts > 0 && numTris > 0 && numTris < origTris)
		{
			numVerts *= 3;

			Sys_Printf("COLLISION: model %s. verts %u. tris %u.\n", model->fileName, numVerts, numTris);

			SaveOBJ(fileNameOut, verts, numVerts, tris, numTris);
		}
#ifdef __MODEL_SIMPLIFY__
		else
		{// Fall back to decimation/simplify method...
			if (tris)
			{// Exception catcher in ch3d.cpp sets tris to NULL on fail...
				free(verts);
				free(tris);
				verts = NULL;
				tris = NULL;
			}

			extern void Decimate(picoModel_t *model, char *fileNameOut);

			Decimate(model, fileNameOut);
		}
#endif //__MODEL_SIMPLIFY__
	}

	if (tris)
	{// Exception catcher in ch3d.cpp sets tris to NULL on fail...
		free(verts);
		free(tris);
	}
}

#endif //__MODEL_CONVEX_HULL__
